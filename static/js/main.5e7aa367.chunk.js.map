{"version":3,"sources":["location.js","Map/Map.js","App.js","serviceWorker.js","index.js"],"names":["getLocation","navigator","geolocation","console","log","watchPosition","position","document","getElementById","innerHTML","coords","latitude","longitude","Map","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","lat","lng","zoom","react_default","a","createElement","className","id","es_Map","center","TileLayer","attribution","url","Component","App","Map_Map_Map","Boolean","window","location","hostname","match","ReactDOM","render","src_App","serviceWorker","ready","then","registration","unregister"],"mappings":"gRA4BMA,EAAc,WAxBdC,UAAUC,YACZC,QAAQC,IAAI,6BAEZD,QAAQC,IAAI,qDAedH,UAAUC,YAAYG,cAAc,SAASC,GAC3CC,SAASC,eAAe,YAAYC,UAAYH,EAASI,OAAOC,SAChEJ,SAASC,eAAe,YAAYC,UAAYH,EAASI,OAAOE,aCZ/CC,qBACnB,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,IAAK,SACLC,KAAM,QACNC,KAAM,IALIV,wEAUZ,IAAMR,EAAW,CAACW,KAAKI,MAAMC,IAAKL,KAAKI,MAAME,KAE7C,OADAvB,IAEEyB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,aACRJ,EAAAC,EAAAC,cAAA,OAAKE,GAAG,aACRJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,OAAQzB,EAAUkB,KAAMP,KAAKI,MAAMG,MAC7CC,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,qDApBiBC,cCElBC,mLAJX,OAAOX,EAAAC,EAAAC,cAACU,EAAD,CAAKT,UAAU,eAFRO,aCIEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAAStC,SAASC,eAAe,SD2H3C,kBAAmBP,WACrBA,UAAU6C,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5e7aa367.chunk.js","sourcesContent":["// button.onclick = function() {\r\n\r\nconst init = () => {\r\n  // check for Geolocation support\r\n  if (navigator.geolocation) {\r\n    console.log('Geolocation is supported!');\r\n  } else {\r\n    console.log('Geolocation is not supported for this Browser/OS.');\r\n  }\r\n};\r\n\r\n// const getLocationFromUser = () => {\r\n//   let startPos;\r\n//   const geoSuccess = function(position) {\r\n//     startPos = position;\r\n//     document.getElementById('startLat').innerHTML = startPos.coords.latitude;\r\n//     document.getElementById('startLon').innerHTML = startPos.coords.longitude;\r\n//   };\r\n//   return navigator.geolocation.getCurrentPosition(geoSuccess);\r\n// };\r\n\r\nconst watchUserPosition = () => {\r\n  navigator.geolocation.watchPosition(function(position) {\r\n    document.getElementById('startLat').innerHTML = position.coords.latitude;\r\n    document.getElementById('startLon').innerHTML = position.coords.longitude;\r\n  });\r\n};\r\n\r\nconst getLocation = () => {\r\n  init();\r\n  watchUserPosition();\r\n  // window.onload = function() {\r\n  //   getLocationFromUser();\r\n  // };\r\n  // setInterval(() => {\r\n  //   getLocationFromUser();\r\n  // }, 1500);\r\n\r\n  //   var startPos;\r\n  //   var nudge = document.getElementById(\"nudge\");\r\n\r\n  //   var showNudgeBanner = function() {\r\n  //     nudge.style.display = \"block\";\r\n  //   };\r\n\r\n  //   var hideNudgeBanner = function() {\r\n  //     nudge.style.display = \"none\";\r\n  //   };\r\n\r\n  //   var nudgeTimeoutId = setTimeout(showNudgeBanner, 5000);\r\n\r\n  // const geoSuccess = function(position) {\r\n  //   hideNudgeBanner();\r\n  //   // We have the location, don't display banner\r\n  //   clearTimeout(nudgeTimeoutId);\r\n\r\n  //   // Do magic with location\r\n  //   startPos = position;\r\n  //   document.getElementById('startLat').innerHTML = startPos.coords.latitude;\r\n  //   document.getElementById('startLon').innerHTML = startPos.coords.longitude;\r\n  // };\r\n  // const geoError = function(error) {\r\n  //   switch (error.code) {\r\n  //     case error.TIMEOUT:\r\n  //       // The user didn't accept the callout\r\n  //       showNudgeBanner();\r\n  //       break;\r\n  //   }\r\n  // };\r\n\r\n  // navigator.geolocation.getCurrentPosition(geoSuccess, geoError);\r\n};\r\n// };\r\n\r\nexport default getLocation;\r\nexport { getLocation };\r\n","// React core\r\nimport React, { Component } from 'react';\r\n\r\n// Vendor\r\nimport { Map as LeafletMap, TileLayer, Marker, Popup } from 'react-leaflet';\r\n\r\n// App components\r\nimport { getLocation } from '../location';\r\n\r\n// Styles\r\nimport './Map.css';\r\n\r\nexport default class Map extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      lat: 50.94544,\r\n      lng: -1.42896,\r\n      zoom: 18,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const position = [this.state.lat, this.state.lng];\r\n    getLocation();\r\n    return (\r\n      <div className=\"Map\">\r\n        <div id=\"startLat\" />\r\n        <div id=\"startLon\" />\r\n        <LeafletMap center={position} zoom={this.state.zoom}>\r\n          <TileLayer\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\r\n          />\r\n          {/* <Marker position={position}>\r\n            <Popup>\r\n              A pretty CSS3 popup. <br /> Easily customizable.\r\n            </Popup>\r\n          </Marker> */}\r\n        </LeafletMap>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// React\r\nimport React, { Component } from 'react';\r\n\r\nimport Map from './Map/Map';\r\n\r\n// Styles\r\n// import './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return <Map className=\"App\" />;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}