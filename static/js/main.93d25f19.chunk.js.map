{"version":3,"sources":["utils/storage.js","utils/location.js","Map/Map.js","App.js","serviceWorker.js","index.js"],"names":["storeLocationPreference","localStorage","setItem","JSON","stringify","getHomeLocation","callback","navigator","geolocation","console","log","getCurrentPosition","position","error","code","enableHighAccuracy","timeout","getLocationFromUser","startCurrentLocationTracking","watchId","watchPosition","getCurrentLocation","Map","_useState","useState","_useState2","Object","slicedToArray","homeLat","setHomeLat","_useState3","_useState4","homeLng","setHomeLng","_useState5","_useState6","lat","setLat","_useState7","_useState8","lng","setLng","_useState9","_useState10","zoom","allowed","parse","getItem","_useState11","_useState12","allowedLocation","setAllowedLocation","_useState13","_useState14","setWatchId","useEffect","homeLocationCallback","coords","latitude","longitude","newLocationCallback","id","pos","walkLocations","_pos$coords","accuracy","altitude","altitudeAccuracy","heading","speed","timestamp","push","location","storeWalkLocation","react_default","a","createElement","className","Fragment","onClick","clearWatch","stopCurrentLocationTracking","es_Map","center","TileLayer","attribution","url","Marker","Popup","App","src_Map_Map","Component","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.93d25f19.chunk.js","sourcesContent":["const storeLocationPreference = () =>\r\n  localStorage.setItem('allowedLocation', JSON.stringify(true));\r\n\r\n// Then to retrieve it from the store and convert to an object again:\r\nconst getLocationPreference = () =>\r\n  JSON.parse(localStorage.getItem('allowedLocation'));\r\n\r\nconst storeWalkLocation = pos => {\r\n  const walkLocations = localStorage.getItem('walkLocations')\r\n    ? JSON.parse(localStorage.getItem('walkLocations'))\r\n    : [];\r\n\r\n  // coords parsed as JSON are {}, they're of type of Coordinates which seems to be the reason? I mean... who knows ¯\\_(ツ)_/¯\r\n  const {\r\n    coords: {\r\n      accuracy,\r\n      altitude,\r\n      altitudeAccuracy,\r\n      heading,\r\n      latitude,\r\n      longitude,\r\n      speed,\r\n    },\r\n    timestamp,\r\n  } = pos;\r\n  walkLocations.push({\r\n    timestamp,\r\n    location: {\r\n      accuracy,\r\n      altitude,\r\n      altitudeAccuracy,\r\n      heading,\r\n      latitude,\r\n      longitude,\r\n      speed,\r\n    },\r\n  });\r\n  localStorage.setItem('walkLocations', JSON.stringify(walkLocations));\r\n};\r\n\r\n// If we need to delete all entries of the store we can simply do:\r\nconst clear = () => localStorage.clear();\r\n\r\nexport {\r\n  storeLocationPreference,\r\n  getLocationPreference,\r\n  storeWalkLocation,\r\n  clear,\r\n};\r\nexport default storeLocationPreference;\r\n","const init = () => {\r\n  // check for Geolocation support\r\n  if (navigator.geolocation) {\r\n    console.log('Geolocation is supported!');\r\n  } else {\r\n    console.log('Geolocation is not supported for this Browser/OS.');\r\n  }\r\n};\r\n\r\nconst getLocationFromUser = callback => {\r\n  let startPos;\r\n  const geoSuccess = position => {\r\n    startPos = position;\r\n    if (callback) {\r\n      callback(position);\r\n    }\r\n  };\r\n  const geoError = error => {\r\n    console.log('Error occurred. Error code: ' + error.code);\r\n  };\r\n  const geoOptions = {\r\n    // TODO: add an option for the user to use up less battery - set to false if they choose that\r\n    enableHighAccuracy: true, // slower, but more accurate location\r\n    timeout: 10 * 1000, // timeout if not received the response\r\n  };\r\n  return navigator.geolocation.getCurrentPosition(\r\n    geoSuccess,\r\n    geoError,\r\n    geoOptions\r\n  );\r\n};\r\n\r\nconst getCurrentLocation = callback => {\r\n  const watchId = navigator.geolocation.watchPosition(position => {\r\n    if (callback) {\r\n      callback(position, watchId);\r\n    }\r\n  });\r\n};\r\n\r\nconst getHomeLocation = callback => {\r\n  init();\r\n  getLocationFromUser(callback);\r\n};\r\n\r\nconst startCurrentLocationTracking = callback => {\r\n  getCurrentLocation(callback);\r\n};\r\n\r\nconst stopCurrentLocationTracking = watchId => {\r\n  console.log(watchId);\r\n  navigator.geolocation.clearWatch(watchId);\r\n};\r\n\r\nexport {\r\n  startCurrentLocationTracking,\r\n  stopCurrentLocationTracking,\r\n  getHomeLocation,\r\n};\r\n","// React core\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n// Vendor\r\nimport { Map as LeafletMap, TileLayer, Marker, Popup } from 'react-leaflet';\r\n\r\n// App components\r\nimport {\r\n  storeLocationPreference,\r\n  getLocationPreference,\r\n  storeWalkLocation,\r\n} from '../utils/storage';\r\nimport {\r\n  getHomeLocation,\r\n  startCurrentLocationTracking,\r\n  stopCurrentLocationTracking,\r\n} from '../utils/location';\r\n\r\n// Styles\r\nimport './Map.css';\r\n\r\nconst Map = () => {\r\n  const [homeLat, setHomeLat] = useState(0);\r\n  const [homeLng, setHomeLng] = useState(0);\r\n\r\n  const [lat, setLat] = useState(homeLat);\r\n  const [lng, setLng] = useState(homeLng);\r\n  const [zoom, setZoom] = useState(18);\r\n  const allowed = getLocationPreference();\r\n  const [allowedLocation, setAllowedLocation] = useState(!!allowed);\r\n  const position = [lat, lng];\r\n\r\n  const [watchId, setWatchId] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setAllowedLocation(allowed);\r\n  });\r\n\r\n  const handleAllowLocation = () => {\r\n    setAllowedLocation(true);\r\n    storeLocationPreference(true);\r\n  };\r\n\r\n  const handleStartTracking = () => {\r\n    getHomeLocation(homeLocationCallback);\r\n    startCurrentLocationTracking(newLocationCallback);\r\n  };\r\n  const handleStopTracking = () => {\r\n    stopCurrentLocationTracking(watchId);\r\n  };\r\n\r\n  const homeLocationCallback = position => {\r\n    setHomeLat(position.coords.latitude);\r\n    setHomeLng(position.coords.longitude);\r\n  };\r\n\r\n  const newLocationCallback = (position, id) => {\r\n    setLat(position.coords.latitude);\r\n    setLng(position.coords.longitude);\r\n    setWatchId(id);\r\n    console.log(id, position);\r\n    storeWalkLocation(position);\r\n  };\r\n\r\n  if (allowedLocation) {\r\n    return (\r\n      <div className=\"Map\">\r\n        {/* TODO: add compontent for Location & Location detail */}\r\n        <div className=\"\">\r\n          <div className=\"top top--left\">\r\n            {!homeLat && !homeLng ? (\r\n              <button onClick={handleStartTracking}>Start!</button>\r\n            ) : (\r\n              <>\r\n                Home location:\r\n                <div>{homeLat}</div>\r\n                <div>{homeLng}</div>\r\n                <button onClick={handleStopTracking}>Stop!</button>\r\n              </>\r\n            )}\r\n          </div>\r\n          <div className=\"top top--right\">\r\n            Current location:\r\n            <div>{lat}</div>\r\n            <div>{lng}</div>\r\n          </div>\r\n        </div>\r\n\r\n        <LeafletMap center={position} zoom={zoom}>\r\n          <TileLayer\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\r\n          />\r\n          <Marker position={position}>\r\n            <Popup>Home</Popup>\r\n          </Marker>\r\n        </LeafletMap>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        <h1>Uh-oh!</h1>\r\n        <p>This app relies on location</p>\r\n\r\n        <button onClick={handleAllowLocation}>\r\n          Allow location to continue\r\n        </button>\r\n      </>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Map;\r\n","// React\r\nimport React, { Component } from 'react';\r\n\r\nimport Map from './Map/Map';\r\n\r\n// Styles\r\n// import './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return <Map className=\"App\" />;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}