{"version":3,"sources":["utils/storage.js","utils/location.js","Map/Map.js","App.js","serviceWorker.js","index.js"],"names":["storeLocationPreference","localStorage","setItem","JSON","stringify","init","navigator","geolocation","console","log","getLocationFromUser","type","startPos","getCurrentPosition","position","document","getElementById","concat","innerHTML","coords","latitude","longitude","error","code","enableHighAccuracy","timeout","Map","_useState","useState","_useState2","Object","slicedToArray","lat","_useState3","_useState4","lng","_useState5","_useState6","zoom","_useState7","_useState8","allowedLocation","setAllowedLocation","useEffect","allowed","parse","getItem","setInterval","react_default","a","createElement","className","id","es_Map","center","TileLayer","attribution","url","Marker","Popup","Fragment","onClick","App","src_Map_Map","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAAMA,EAA0B,kBAC9BC,aAAaC,QAAQ,kBAAmBC,KAAKC,WAAU,KCDnDC,EAAO,WAEPC,UAAUC,YACZC,QAAQC,IAAI,6BAEZD,QAAQC,IAAI,sDAIVC,EAAsB,SAAAC,GAC1B,IAAIC,EAmBJN,UAAUC,YAAYM,mBAlBH,SAAAC,GACjBF,EAAWE,EACXC,SAASC,eAAT,GAAAC,OAA2BN,EAA3B,QAAsCO,UAAYN,EAASO,OAAOC,SAClEL,SAASC,eAAT,GAAAC,OAA2BN,EAA3B,QAAsCO,UAAYN,EAASO,OAAOE,WAEnD,SAAAC,GACfd,QAAQC,IAAI,+BAAiCa,EAAMC,OAOlC,CAEjBC,oBAAoB,EACpBC,QAAS,OCuDEC,SAlEH,WAAM,IAAAC,EACMC,mBAAS,UADfC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTK,EADSH,EAAA,GAAAI,GAAAJ,EAAA,GAEMD,oBAAU,UAFhBM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAETE,EAFSD,EAAA,GAAAE,GAAAF,EAAA,GAGQN,mBAAS,KAHjBS,EAAAP,OAAAC,EAAA,EAAAD,CAAAM,EAAA,GAGTE,EAHSD,EAAA,GAAAE,GAAAF,EAAA,GAI8BT,oBAAS,IAJvCY,EAAAV,OAAAC,EAAA,EAAAD,CAAAS,EAAA,GAITE,EAJSD,EAAA,GAIQE,EAJRF,EAAA,GAKV1B,EAAW,CAACkB,EAAKG,GAEvBQ,oBAAU,WACR,IAAMC,EFnBRzC,KAAK0C,MAAM5C,aAAa6C,QAAQ,oBEoB9BJ,EAAmBE,KAQrB,OAAIH,GDOJpC,IACAK,EAAoB,QAIpBL,IACA0C,YAAY,WACVrC,EAAoB,YACnB,MCXCsC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,iBAEEH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,YACRJ,EAAAC,EAAAC,cAAA,OAAKE,GAAG,aAOVJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,oBAEEH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,eACRJ,EAAAC,EAAAC,cAAA,OAAKE,GAAG,iBAIZJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,OAAQxC,EAAUwB,KAAMA,GAClCU,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,4CAENT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAQ5C,SAAUA,GAChBkC,EAAAC,EAAAC,cAACS,EAAA,EAAD,iBAONX,EAAAC,EAAAC,cAAAF,EAAAC,EAAAW,SAAA,KACEZ,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,wCAEAF,EAAAC,EAAAC,cAAA,UAAQW,QA9Cc,WAC1BnB,GAAmB,GACnB1C,MA4CI,iCC5DO8D,mLAJX,OAAOd,EAAAC,EAAAC,cAACa,EAAD,CAAKZ,UAAU,eAFRa,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASzD,SAASC,eAAe,SD2H3C,kBAAmBV,WACrBA,UAAUmE,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8020f549.chunk.js","sourcesContent":["const storeLocationPreference = () =>\r\n  localStorage.setItem('allowedLocation', JSON.stringify(true));\r\n\r\n// Then to retrieve it from the store and convert to an object again:\r\nconst getLocationPreference = () =>\r\n  JSON.parse(localStorage.getItem('allowedLocation'));\r\n\r\n// If we need to delete all entries of the store we can simply do:\r\nconst clear = () => localStorage.clear();\r\n\r\nexport { storeLocationPreference, getLocationPreference, clear };\r\nexport default storeLocationPreference;\r\n","const init = () => {\r\n  // check for Geolocation support\r\n  if (navigator.geolocation) {\r\n    console.log('Geolocation is supported!');\r\n  } else {\r\n    console.log('Geolocation is not supported for this Browser/OS.');\r\n  }\r\n};\r\n\r\nconst getLocationFromUser = type => {\r\n  let startPos;\r\n  const geoSuccess = position => {\r\n    startPos = position;\r\n    document.getElementById(`${type}Lat`).innerHTML = startPos.coords.latitude;\r\n    document.getElementById(`${type}Lon`).innerHTML = startPos.coords.longitude;\r\n  };\r\n  const geoError = error => {\r\n    console.log('Error occurred. Error code: ' + error.code);\r\n    // error.code can be:\r\n    //   0: unknown error\r\n    //   1: permission denied\r\n    //   2: position unavailable (error response from location provider)\r\n    //   3: timed out\r\n  };\r\n  const geoOptions = {\r\n    // TODO: add an option for the user to use up less battery - set to false if they choose that\r\n    enableHighAccuracy: true, // slower, but more accurate location\r\n    timeout: 10 * 1000, // timeout if not received the response\r\n  };\r\n  navigator.geolocation.getCurrentPosition(geoSuccess, geoError, geoOptions);\r\n  // console.log(startPos);\r\n\r\n  // const watchId = navigator.geolocation.watchPosition(position => {\r\n  //   document.getElementById('watchLat').innerHTML = position.coords.latitude;\r\n  //   document.getElementById('watchLon').innerHTML = position.coords.longitude;\r\n  // });\r\n  // console.log(watchId);\r\n};\r\n\r\nconst getHomeLocation = () => {\r\n  init();\r\n  getLocationFromUser('home');\r\n};\r\n\r\nconst getCurrentLocation = () => {\r\n  init();\r\n  setInterval(() => {\r\n    getLocationFromUser('current');\r\n  }, 1500);\r\n};\r\n\r\nexport { getCurrentLocation, getHomeLocation };\r\n","// React core\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n// Vendor\r\nimport { Map as LeafletMap, TileLayer, Marker, Popup } from 'react-leaflet';\r\n\r\n// App components\r\nimport {\r\n  storeLocationPreference,\r\n  getLocationPreference,\r\n} from '../utils/storage';\r\nimport { getHomeLocation, getCurrentLocation } from '../utils/location';\r\n\r\n// Styles\r\nimport './Map.css';\r\n\r\nconst Map = () => {\r\n  const [lat, setLat] = useState(50.94544);\r\n  const [lng, setLng] = useState(-1.42896);\r\n  const [zoom, setZoom] = useState(18);\r\n  const [allowedLocation, setAllowedLocation] = useState(false);\r\n  const position = [lat, lng];\r\n\r\n  useEffect(() => {\r\n    const allowed = getLocationPreference();\r\n    setAllowedLocation(allowed);\r\n  });\r\n\r\n  const handleAllowLocation = () => {\r\n    setAllowedLocation(true);\r\n    storeLocationPreference(true);\r\n  };\r\n\r\n  if (allowedLocation) {\r\n    getHomeLocation();\r\n    getCurrentLocation();\r\n    return (\r\n      <div className=\"Map\">\r\n        {/* TODO: add compontent for Location & Location detail */}\r\n        <div className=\"\">\r\n          <div className=\"top top--left\">\r\n            Home location:\r\n            <div id=\"homeLat\" />\r\n            <div id=\"homeLon\" />\r\n          </div>\r\n          {/* <div>\r\n            watch:\r\n            <div id=\"watchLat\" />\r\n            <div id=\"watchLon\" />\r\n          </div> */}\r\n          <div className=\"top top--right\">\r\n            Current location:\r\n            <div id=\"currentLat\" />\r\n            <div id=\"currentLon\" />\r\n          </div>\r\n        </div>\r\n\r\n        <LeafletMap center={position} zoom={zoom}>\r\n          <TileLayer\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\r\n          />\r\n          <Marker position={position}>\r\n            <Popup>Home</Popup>\r\n          </Marker>\r\n        </LeafletMap>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        <h1>Uh-oh!</h1>\r\n        <p>This app relies on location</p>\r\n\r\n        <button onClick={handleAllowLocation}>\r\n          Allow location to continue\r\n        </button>\r\n      </>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Map;\r\n","// React\r\nimport React, { Component } from 'react';\r\n\r\nimport Map from './Map/Map';\r\n\r\n// Styles\r\n// import './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return <Map className=\"App\" />;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}