{"version":3,"sources":["location.js","Map/Map.js","App.js","serviceWorker.js","index.js"],"names":["getLocationFromUser","startPos","navigator","geolocation","getCurrentPosition","position","document","getElementById","innerHTML","coords","latitude","longitude","getLocation","console","log","window","onload","setInterval","Map","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","lat","lng","zoom","react_default","a","createElement","className","id","es_Map","center","TileLayer","attribution","url","Component","App","Map_Map_Map","Boolean","location","hostname","match","ReactDOM","render","src_App","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAWMA,EAAsB,WAC1B,IAAIC,EAMJ,OAAOC,UAAUC,YAAYC,mBALV,SAASC,GAC1BJ,EAAWI,EACXC,SAASC,eAAe,YAAYC,UAAYP,EAASQ,OAAOC,SAChEJ,SAASC,eAAe,YAAYC,UAAYP,EAASQ,OAAOE,aAK9DC,EAAc,WAjBdV,UAAUC,YACZU,QAAQC,IAAI,6BAEZD,QAAQC,IAAI,qDAgBdC,OAAOC,OAAS,WACdhB,KAEFiB,YAAY,WACVjB,KACC,OChBgBkB,qBACnB,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,IAAK,SACLC,KAAM,QACNC,KAAM,IALIV,wEAUZ,IAAMd,EAAW,CAACiB,KAAKI,MAAMC,IAAKL,KAAKI,MAAME,KAE7C,OADAhB,IAEEkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,aACRJ,EAAAC,EAAAC,cAAA,OAAKE,GAAG,aACRJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAYC,OAAQ/B,EAAUwB,KAAMP,KAAKI,MAAMG,MAC7CC,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,qDApBiBC,cCElBC,mLAJX,OAAOX,EAAAC,EAAAC,cAACU,EAAD,CAAKT,UAAU,eAFRO,aCIEG,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAAS3C,SAASC,eAAe,SD2H3C,kBAAmBL,WACrBA,UAAUgD,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.deaf6d23.chunk.js","sourcesContent":["// button.onclick = function() {\r\n\r\nconst init = () => {\r\n  // check for Geolocation support\r\n  if (navigator.geolocation) {\r\n    console.log('Geolocation is supported!');\r\n  } else {\r\n    console.log('Geolocation is not supported for this Browser/OS.');\r\n  }\r\n};\r\n\r\nconst getLocationFromUser = () => {\r\n  let startPos;\r\n  const geoSuccess = function(position) {\r\n    startPos = position;\r\n    document.getElementById('startLat').innerHTML = startPos.coords.latitude;\r\n    document.getElementById('startLon').innerHTML = startPos.coords.longitude;\r\n  };\r\n  return navigator.geolocation.getCurrentPosition(geoSuccess);\r\n};\r\n\r\nconst getLocation = () => {\r\n  init();\r\n  window.onload = function() {\r\n    getLocationFromUser();\r\n  };\r\n  setInterval(() => {\r\n    getLocationFromUser();\r\n  }, 1500);\r\n  //   var startPos;\r\n  //   var nudge = document.getElementById(\"nudge\");\r\n\r\n  //   var showNudgeBanner = function() {\r\n  //     nudge.style.display = \"block\";\r\n  //   };\r\n\r\n  //   var hideNudgeBanner = function() {\r\n  //     nudge.style.display = \"none\";\r\n  //   };\r\n\r\n  //   var nudgeTimeoutId = setTimeout(showNudgeBanner, 5000);\r\n\r\n  // const geoSuccess = function(position) {\r\n  //   hideNudgeBanner();\r\n  //   // We have the location, don't display banner\r\n  //   clearTimeout(nudgeTimeoutId);\r\n\r\n  //   // Do magic with location\r\n  //   startPos = position;\r\n  //   document.getElementById('startLat').innerHTML = startPos.coords.latitude;\r\n  //   document.getElementById('startLon').innerHTML = startPos.coords.longitude;\r\n  // };\r\n  // const geoError = function(error) {\r\n  //   switch (error.code) {\r\n  //     case error.TIMEOUT:\r\n  //       // The user didn't accept the callout\r\n  //       showNudgeBanner();\r\n  //       break;\r\n  //   }\r\n  // };\r\n\r\n  // navigator.geolocation.getCurrentPosition(geoSuccess, geoError);\r\n};\r\n// };\r\n\r\nexport default getLocation;\r\nexport { getLocation };\r\n","// React core\r\nimport React, { Component } from 'react';\r\n\r\n// Vendor\r\nimport { Map as LeafletMap, TileLayer, Marker, Popup } from 'react-leaflet';\r\n\r\n// App components\r\nimport { getLocation } from '../location';\r\n\r\n// Styles\r\nimport './Map.css';\r\n\r\nexport default class Map extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      lat: 50.94544,\r\n      lng: -1.42896,\r\n      zoom: 13,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const position = [this.state.lat, this.state.lng];\r\n    getLocation();\r\n    return (\r\n      <div className=\"Map\">\r\n        <div id=\"startLat\" />\r\n        <div id=\"startLon\" />\r\n        <LeafletMap center={position} zoom={this.state.zoom}>\r\n          <TileLayer\r\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\r\n          />\r\n          {/* <Marker position={position}>\r\n            <Popup>\r\n              A pretty CSS3 popup. <br /> Easily customizable.\r\n            </Popup>\r\n          </Marker> */}\r\n        </LeafletMap>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// React\nimport React, { Component } from 'react';\n\nimport Map from './Map/Map';\n\n// Styles\n// import './App.css';\n\nclass App extends Component {\n  render() {\n    return <Map className=\"App\" />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}